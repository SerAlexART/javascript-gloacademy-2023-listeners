'use strict';

// * Стиль кода
// Написанный нами функционал, рещающий некую задачу, всегда должен соответствовать трём требованиям:
// 1. Правильно работать
// 2. Быть читаемым
// 3. Его должны понимать люди

// Всю структура кода внутри функции(область видимости) можно разделить на 4 блока:
// 1. Блок - Объявление переменных
// 2. Блок - Описание функций
// 3. Блок - Функционал
// 4. Блок - Мусорный, вывод в консоль или мусорных логов


// * 1. Блок - Объявление переменных
// Сначала вносим константы/переменные, которые получаем со страницы, они обычно не изменяются, затем вносим переменные заданные вручную
const button = document.querySelector($btn);

const a = 1;
const b = 'second';

let count = 0;
let array = [];

let q, w, e, r, t, y; // Объявление нескольких переменных в одну строку


// * 2. Блок - Описание функций
// Здесь только описание функций без их вызова
function foo() {
    const c = 'c';
}

function boo() {
    const d = 'd';
}

// * 3. Блок - Функционал
// Здесь производятся все вычисления о основная часть разработки, расчёт, обработчик событий, действия, проверяем условия, изменение переменных, запуск функций и т.д.
button.addEventlistener('click', function () {
    console.log('Clicked');
});

count = 1; // Переопределение значения переменной

if (a === 1) console.log(a);
foo();
boo();


// * 4. Блок - Мусорный, вывод в консоль или мусорных логов
// Обычно используется для проверки кода и удаляется после разработки перед продом
console.log(b);
console.log(array);



// * Нейминг функций
// Переменная должна называться так, чтобы из её названия было понятно, что в ней хранится и для чего она используется

// Функция должна называться так, чтобы из её названия былоп понятно, что она делает, то-есть название должно соответствовать действию фунеции

// * Исключения
// Часто случается ситуации, когда мы вынуждены описывать функции в блоке объявления переменных. Но возможно, что разработчик делает что-то не так, поэтому стараемся разобраться и изменить ситуацию